const std = @import("std");


var mem: u16 = 0;
var mem2: u16 = 0;
var outs: [(0xFFFF+1)]u16 = [1]u16{0} ** (0xFFFF+1);

// Процессор должен содержать инструкции и память достаточную для хранения stt.
// Я сначала напишу решение широким способом, которое можно оптимизировать.
// Предположение, что всегда есть неизвестные факты ведёт к тому, что
// цикл должен возвращаться к поиску пути, на случай изменений.
// Что значит он ведёт к себе за счёт учёта того случая когда не ведёт.

// Надо чтобы среди возможных программ были:
// Функции доступа:
// Чтение
// Запись
// Следующее/предыдущее состояние
// Поиск циклов
// int арифметические операции и неравенства
// Подсчёт длин путей
// Сравнение длин циклов для выбора длиннейшего цикла
// Исполнение пути

// Надо будет уменьшить число вариантов при выборе.

// Надо чтобы всего состояний было больше, чем выборов.
//

// То есть нужно найти такой длиннейший цикл, что при наибольшем числе альтернатив остаётся длиннейшим.

// Это сгодится для очень простого компьютера,
// но я не вижу как сжать все эти программы до столь малого
// числа инструкций.
// Можно попробовать сделать выбор среди более простых
// состояний, например аргументов функции,
// но это не даст оптимизации себя, то есть
// реализации кода.
// const ProcessorState = packed struct {
//     i0: u2,
//     a0: u2,
//     i1: u2,
//     a1: u2,
//     i2: u2,
//     a2: u2,
//     i3: u2,
//     a3: u2,
// };

